services:
  frontend:
    image: ghcr.io/worklenz/worklenz-frontend
    build:
      context: ./worklenz-frontend
      dockerfile: Dockerfile
    container_name: worklenz_frontend
    ports:
      - "4200:4200"
    depends_on:
      - backend
    networks:
      - worklenz    

  backend:
    image: ghcr.io/worklenz/worklenz-backend
    build:
      context: ./worklenz-backend
      dockerfile: Dockerfile
    container_name: worklenz_backend
    ports:
      - "3000:3000"
    depends_on:
      - db
    environment:
      ANGULAR_DIST_DIR: "${ANGULAR_DIST_DIR}"
      ANGULAR_SRC_DIR: "${ANGULAR_SRC_DIR}"
      AWS_REGION: "${AWS_REGION}"
      BACKEND_PUBLIC_DIR: "${BACKEND_PUBLIC_DIR}"
      BACKEND_VIEWS_DIR: "${BACKEND_VIEWS_DIR}"
      COMMIT_BUILD_IMMEDIATELY: "${COMMIT_BUILD_IMMEDIATELY}"
      COOKIE_SECRET: "${COOKIE_SECRET}"
      DB_HOST: "${DB_HOST}"
      DB_MAX_CLIENTS: "${DB_MAX_CLIENTS}"
      DB_NAME: "${DB_NAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      DB_USER: "${DB_USER}"
      GOOGLE_CALLBACK_URL: "${GOOGLE_CALLBACK_URL}"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET}"
      HOSTNAME: "${HOSTNAME}"
      LOGIN_FAILURE_REDIRECT: "${LOGIN_FAILURE_REDIRECT}"
      NODE_ENV: "${NODE_ENV}"
      PORT: "${PORT}"
      SESSION_NAME: "${SESSION_NAME}"
      SESSION_SECRET: "${SESSION_SECRET}"
      SLACK_WEBHOOK: "${SLACK_WEBHOOK}"
      SOCKET_IO_CORS: "${SOCKET_IO_CORS}"
      SOURCE_EMAIL: "${SOURCE_EMAIL}"
      USE_PG_NATIVE: "${USE_PG_NATIVE}"
      BUCKET: "${BUCKET}"
      REGION: "${REGION}"
      S3_URL: "${S3_URL}"
      S3_ACCESS_KEY_ID: "${S3_ACCESS_KEY_ID}"
      S3_SECRET_ACCESS_KEY: "${S3_SECRET_ACCESS_KEY}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - worklenz  

  db:
    image: postgres:15
    container_name: worklenz_db
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - worklenz  
    volumes:
      - worklenz_postgres_data:/var/lib/postgresql/data
      - ./worklenz-backend/database/:/docker-entrypoint-initdb.d

volumes:
  worklenz_postgres_data:

networks:
  worklenz:
    driver: bridge
